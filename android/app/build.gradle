def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: When we start building the full app with VoIP for all brands, change the app id here to be an env variable.
        applicationId "com.voys.freedom"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    def KEYSTORE_FILE_NAME = "keystore.jks"
     signingConfigs {
               release {
                   if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                       storeFile file(System.getenv()["FCI_BUILD_DIR"] + "/" + KEYSTORE_FILE_NAME)
                       storePassword System.getenv()["FCI_KEYSTORE_PASSWORD"]
                       keyAlias System.getenv()["FCI_KEY_ALIAS"]
                       keyPassword System.getenv()["FCI_KEY_PASSWORD"]
                   }
               }
           }

    buildTypes {
        release {
            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                signingConfig signingConfigs.release
            }
            else {
                // Signing with the debug keys outside of CI.
                signingConfig signingConfigs.debug
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
